/**
 * Definition for Directed graph.
 * struct DirectedGraphNode {
 *     int label;
 *     vector<DirectedGraphNode *> neighbors;
 *     DirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    /**
     * @param nodes a array of directed graph node
     * @return a connected set of a directed graph
     */
    vector<vector<int>> connectedSet2(vector<DirectedGraphNode*>& nodes) {
        // Write your code here
        unordered_map<int, int> myMap;
        for(auto node : nodes) myMap[node->label] = node->label;
        for(auto node : nodes) {
            int val = node->label;
            
            for(auto neighbor : node->neighbors) {
                int rootVal = findNode(val, myMap);
                int neighborVal = neighbor->label;
                int rootN = findNode(neighborVal, myMap);
                if(rootVal != rootN) {
                    unionNodes(val, neighborVal, myMap);
                }
            }
        }
        
        unordered_map<int, vector<int> > myMap2;
        for(auto p : myMap) {
            int curFather = findNode(p.first, myMap);
            if(myMap2.find(curFather) == myMap2.end()) {
                vector<int> tempVec;
                tempVec.push_back(p.first);
                myMap2[curFather] = tempVec;
            } else {
                myMap2[curFather].push_back(p.first);
            }
        }
        
        vector<vector<int> > result;
        for(auto p : myMap2) {
            sort(p.second.begin(), p.second.end());
            result.push_back(p.second);
        }
        return result;
    }
    
    //find Node second
    int findNode(int val, unordered_map<int, int>& myMap) {
        if(myMap.find(val) == myMap.end()) {
            myMap[val] = val;
            return val;
        } else {
            int tempVal = val;
            while(myMap[tempVal] != tempVal) {
                tempVal = myMap[tempVal];
            }
            int parentVal = tempVal;
            tempVal = val;
            while(myMap[tempVal] != tempVal) {
                int temp = myMap[tempVal];
                myMap[tempVal] = parentVal;
                tempVal = temp;
            }
            return parentVal;
        }
    }
    
    
/*    int findNode(int val, unordered_map<int, int>& myMap) {
        if(myMap.find(val) == myMap.end()) {
            myMap[val] = val;
            return val;
        } else {
            int tempVal = val;
            while(myMap[tempVal] != tempVal) {
                tempVal = myMap[tempVal];
            }
            myMap[val] = tempVal;
            return tempVal;
        }
    }*/
    
    void unionNodes(int val1, int val2, unordered_map<int, int>& myMap) {
        int p1 = findNode(val1, myMap);
        int p2 = findNode(val2, myMap);
        if(p1 != p2) {
            myMap[p1] = p2;
        }
    }
};
