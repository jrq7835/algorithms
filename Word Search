class Solution {
public:
    /**
     * @param board: A list of lists of character
     * @param word: A string
     * @return: A boolean
     */
    bool exist(vector<vector<char> > &board, string word) {
        // write your code here
        if(word.length() == 0) return true;
        if(board.empty()) return false;
        int rows = board.size();
        int cols = board[0].size();
        vector<vector<bool> > visited (rows, vector<bool> (cols, false));
        
        for(int r = 0; r < rows; ++r) {
            for(int c = 0; c < cols; ++c) {
                if(dfs(board, visited, r, c, 0, word)) return true;
            }
        }
        
        return false;
    }
    
    bool dfs(vector<vector<char> > &board, vector<vector<bool> > &visited, int r, int c, int pos, string &word) {
        
        if(r >= 0 && r < board.size() && c >= 0 && c < board[0].size()) {
            if(!visited[r][c]) {
                if(word[pos] != board[r][c]) return false;
                if(pos == word.length() - 1) return true;
                
                visited[r][c] = true;
                bool result = dfs(board, visited, r + 1, c, pos + 1, word) || 
                              dfs(board, visited, r - 1, c, pos + 1, word) ||
                              dfs(board, visited, r, c + 1, pos + 1, word) ||
                              dfs(board, visited, r, c - 1, pos + 1, word);
                if(result) return true;
                visited[r][c] = false;
            }
        }
        
        return false;
    }
};
