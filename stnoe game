class Solution {
public:
    /**
     * @param A an integer array
     * @return an integer
     */
    int stoneGame(vector<int>& A) {
        if(A.size() <= 1) return 0;
        int size = A.size();
        vector<vector<int> > sum (size, vector<int> (size, 0));
        vector<vector<int> > dp (size, vector<int> (size, -1));
        
        for(int i = 0; i < size; ++i) {
            sum[i][i] = A[i];
            dp[i][i] = 0;
        }
        
        for(int r = 0; r < size; ++r) {
            for(int c = r + 1; c < size; ++c) {
                sum[r][c] = sum[r][c - 1] + A[c];
            }
        }
        
        return memorySearch(A, sum, dp, 0, size - 1);
    }
    
    int memorySearch(vector<int>& nums, vector<vector<int> > &sum, vector<vector<int> > &dp,
                    int l, int r) {
        if(dp[l][r] != -1) {
            return dp[l][r];
        }
        
        dp[l][r] = INT_MAX;
        for(int k = l; k < r; ++k) {
            dp[l][r] = min(memorySearch(nums, sum, dp, l, k) + 
                           memorySearch(nums, sum, dp, k + 1, r) +
                           sum[l][r], dp[l][r]);
        }
        return dp[l][r];
    }
};
