class Solution {
public:
    /*
     * param k : description of k
     * param nums : description of array and index 0 ~ n-1
     * return: description of return
     */
    int kthLargestElement(int k, vector<int> nums) {

        
        if(nums.empty() || nums.size() < k || k <= 0) return 0;
        
        int size = nums.size();
        int targetIndex = size - k;

        return helper(nums, 0, size - 1, targetIndex);
        
       // return -1;
        
    }
    
    int helper(vector<int> &nums, int low, int high, int targetIndex) {
        if(low == high) {
            return nums[low];
        }
        
        int pos = partition(nums, low, high);
        if(pos == targetIndex) return nums[pos];
        if(pos > targetIndex) {
            return helper(nums, low, pos - 1, targetIndex);
        } else {
            return helper(nums, pos + 1, high, targetIndex);
        }

    }
    
    int partition(vector<int> &nums, int low, int high) {
        int pivot = nums[low];
        while(low < high) {
            while(low < high && nums[high] >= pivot) {
                high--;
            }
            
            nums[low] = nums[high];
            
            while(low < high && nums[low] <= pivot) {
                low++;
            }
            
            nums[high] = nums[low];
        }
        
        nums[low] = pivot;
        return low;
    }
    
};
